// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button should have a bounced state 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: 90%;
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: #FFFFFF;
  background-color: rgba(0,0,0,0);
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: pointer;
  outline: none;
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  opacity: 1;
  font-family: 'Roboto',sans-serif;
  font-size: 1rem;
  font-weight: 400;
  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;
}

<Button
  bounced={true}
  disabled={false}
  type="button"
  width="90%"
>
  <styled.button
    bounced={true}
    disabled={false}
    type="button"
    width="90%"
  >
    <StyledComponent
      bounced={true}
      disabled={false}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            [Function],
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: ",
              [Function],
              ";
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: ",
              [Function],
              ";
  outline: none;
  transition: all 0.3s ease 0s;
  opacity: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  font-size: 1rem;
  font-weight: 400;

  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;

  &:hover {
    background-color: ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.button",
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      type="button"
      width="90%"
    >
      <button
        className="c0"
        disabled={false}
        type="button"
        width="90%"
      />
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button should have a disabled state 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: 90%;
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: #FFFFFF;
  background-color: rgba(0,0,0,0);
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: not-allowed;
  outline: none;
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  opacity: 0.5;
  font-family: 'Roboto',sans-serif;
  font-size: 1rem;
  font-weight: 400;
  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;
}

.c0:hover {
  background-color: rgba(0,0,0,0);
}

<Button
  disabled={true}
  type="button"
  width="90%"
>
  <styled.button
    disabled={true}
    type="button"
    width="90%"
  >
    <StyledComponent
      disabled={true}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            [Function],
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: ",
              [Function],
              ";
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: ",
              [Function],
              ";
  outline: none;
  transition: all 0.3s ease 0s;
  opacity: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  font-size: 1rem;
  font-weight: 400;

  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;

  &:hover {
    background-color: ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.button",
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      type="button"
      width="90%"
    >
      <button
        className="c0"
        disabled={true}
        type="button"
        width="90%"
      />
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button should have a type property 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: 90%;
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: #FFFFFF;
  background-color: rgba(0,0,0,0);
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: pointer;
  outline: none;
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  opacity: 1;
  font-family: 'Roboto',sans-serif;
  font-size: 1rem;
  font-weight: 400;
  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;
}

<Button
  disabled={false}
  type="submit"
  width="90%"
>
  <styled.button
    disabled={false}
    type="submit"
    width="90%"
  >
    <StyledComponent
      disabled={false}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            [Function],
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: ",
              [Function],
              ";
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: ",
              [Function],
              ";
  outline: none;
  transition: all 0.3s ease 0s;
  opacity: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  font-size: 1rem;
  font-weight: 400;

  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;

  &:hover {
    background-color: ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.button",
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      type="submit"
      width="90%"
    >
      <button
        className="c0"
        disabled={false}
        type="submit"
        width="90%"
      />
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button should have a type property 2`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: 90%;
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: #FFFFFF;
  background-color: rgba(0,0,0,0);
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: pointer;
  outline: none;
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  opacity: 1;
  font-family: 'Roboto',sans-serif;
  font-size: 1rem;
  font-weight: 400;
  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;
}

<Button
  disabled={false}
  type="reset"
  width="90%"
>
  <styled.button
    disabled={false}
    type="reset"
    width="90%"
  >
    <StyledComponent
      disabled={false}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            [Function],
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: ",
              [Function],
              ";
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: ",
              [Function],
              ";
  outline: none;
  transition: all 0.3s ease 0s;
  opacity: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  font-size: 1rem;
  font-weight: 400;

  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;

  &:hover {
    background-color: ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.button",
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      type="reset"
      width="90%"
    >
      <button
        className="c0"
        disabled={false}
        type="reset"
        width="90%"
      />
    </StyledComponent>
  </styled.button>
</Button>
`;

exports[`Button should render correctly 1`] = `
.c0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex-direction: row;
  -ms-flex-direction: row;
  flex-direction: row;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: 90%;
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: #FFFFFF;
  background-color: rgba(0,0,0,0);
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: pointer;
  outline: none;
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  opacity: 1;
  font-family: 'Roboto',sans-serif;
  font-size: 1rem;
  font-weight: 400;
  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;
}

<Button
  disabled={false}
  type="button"
  width="90%"
>
  <styled.button
    disabled={false}
    type="button"
    width="90%"
  >
    <StyledComponent
      disabled={false}
      forwardedClass={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [
            [Function],
          ],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": false,
            "lastClassName": "c0",
            "rules": Array [
              "
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  height: 3rem;
  line-height: 1.5rem;
  width: ",
              [Function],
              ";
  padding: .375rem .75rem;
  box-sizing: border-box;
  color: ",
              [Function],
              ";
  background-color: ",
              [Function],
              ";
  border: 1px solid #ffffff;
  border-radius: .25rem;
  cursor: ",
              [Function],
              ";
  outline: none;
  transition: all 0.3s ease 0s;
  opacity: ",
              [Function],
              ";
  font-family: ",
              [Function],
              ";
  font-size: 1rem;
  font-weight: 400;

  text-transform: uppercase !important;
  margin: 0 auto;
  margin-top: 1.5rem;

  &:hover {
    background-color: ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.button",
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "button",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        }
      }
      forwardedRef={null}
      type="button"
      width="90%"
    >
      <button
        className="c0"
        disabled={false}
        type="button"
        width="90%"
      />
    </StyledComponent>
  </styled.button>
</Button>
`;
